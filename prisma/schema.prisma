// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? 
  accounts      Account[]
  sessions      Session[]
  collections  UserBook[]    // Relation field for books
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Book {
  id          String   @id @default(cuid())
  coverUrl    String?
  title       String
  category    String?
  author      String
  language    String?
  description String?
  publisher   String?
  pageCount   Int?
  isbn        String?  @unique
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users        UserBook[]
}

model UserBook {
  id         String       @id @default(cuid())
  userId     String
  bookId     String
  status     String?      
  progress   Int?         
  addedAt    DateTime     @default(now())

  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book         @relation(fields: [bookId], references: [id], onDelete: Cascade)

  flashcards Flashcard[]
  quotes     Quote[]

  @@unique([userId, bookId])
}

model Flashcard {
  id           String     @id @default(cuid())
  userBookId   String
  front        String
  back         String
  createdAt    DateTime   @default(now())

  userBook     UserBook   @relation(fields: [userBookId], references: [id], onDelete: Cascade)
}

model Quote {
  id           String     @id @default(cuid())
  userBookId   String
  content      String
  page         Int?
  createdAt    DateTime   @default(now())

  userBook     UserBook   @relation(fields: [userBookId], references: [id], onDelete: Cascade)
}